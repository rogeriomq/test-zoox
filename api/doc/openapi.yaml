openapi: 3.0.3
info:
  title: Zoox API - Selective Process.
  description: 'Project test-zoox, part API. use `x-api-key` on header in yours request.'
  contact:
    name: Rog√©rio Milhomens de Queiroz
    email: rogerio.mq@gmail.com
  version: 1.0.0
servers:
  - url: 'http://localhost:3000'
    description: Development server
tags:
  - name: ping
  - name: state
  - name: city
paths:
  /ping:
    get:
      tags:
        - ping
      summary: Simples route Health Server!
      responses:
        '200':
          description: ping route
          content:
            application/json:
              schema:
                type: object
                properties:
                  ping:
                    type: string
                    default: pong
  /states:
    get:
      tags:
        - state
      summary: Returns states ordered by abbreviations
      responses:
        '200':
          description: Array of states
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/State'
  /state:
    post:
      tags:
        - state
      summary: Create a new state to the store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State_NEW'
      responses:
        '201':
          description: Object state stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
    put:
      tags:
        - state
      summary: Update an exiting state
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
      responses:
        '201':
          description: State updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
  '/state/{id}':
    delete:
      tags:
        - state
      summary: Delete a state
      parameters:
        - name: id
          in: path
          description: State id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: State deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: State not found
          content: {}
  /cities:
    get:
      tags:
        - city
      summary: Returns cities ordered by name
      responses:
        '200':
          description: Array of cities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/City'
  /city:
    post:
      tags:
        - city
      summary: Create a new state to the store
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State_NEW'
      responses:
        '201':
          description: Object city stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
    put:
      tags:
        - city
      summary: Update an exiting state
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/State'
      responses:
        '201':
          description: City updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
  '/city/{id}':
    delete:
      tags:
        - city
      summary: Delete a state
      parameters:
        - name: id
          in: path
          description: State id to delete
          required: true
          schema:
            type: string
      responses:
        '200':
          description: City deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/State'
        '400':
          description: Invalid ID supplied
          content: {}
        '404':
          description: State not found
          content: {}
components:
  schemas:
    State:
      type: object
      properties:
        _id:
          description: UUID generated by api
          type: string
        name:
          type: string
        abbreviation:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    State_NEW:
      type: object
      properties:
        name:
          type: string
        abbreviation:
          type: string
      required:
        - name
        - abbreviation
    City_NEW:
      type: object
      properties:
        name:
          type: string
        abbreviation:
          type: string
        stateId:
          type: string
    City:
      type: object
      properties:
        _id:
          description: UUID generated by api
          type: string
        name:
          type: string
        abbreviation:
          type: string
        stateId:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
  securitySchemes:
    X-API-Key:
      type: apiKey
      in: header
      name: X-API-Key
